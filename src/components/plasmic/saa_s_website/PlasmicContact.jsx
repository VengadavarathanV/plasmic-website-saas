// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9DRVreLqCyHSecyifmovL7
// Component: npy9UcUem7vmHg
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: 5q0d-nd0cELSvd/component
import TextInput from "../../TextInput"; // plasmic-import: M4Ie8C1t_mn5s/component
import Select from "../../Select"; // plasmic-import: Ptb8BDgatfNdxx/component
import Checkbox from "../../Checkbox"; // plasmic-import: 5RV4oyktt5eAJK/component
import Button from "../../Button"; // plasmic-import: QELWMjce80Acl/component
import Footer from "../../Footer"; // plasmic-import: 6zsXKEMs4WOlZZ/component
import { useScreenVariants as useScreenVariantsruCWDbKoSkemq } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ruC-wDbKoSKEMQ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_saa_s_website.module.css"; // plasmic-import: 9DRVreLqCyHSecyifmovL7/projectcss
import sty from "./PlasmicContact.module.css"; // plasmic-import: npy9UcUem7vmHg/css
import ArrowRightsvgIcon from "./icons/PlasmicIcon__ArrowRightsvg"; // plasmic-import: gm_BEJaLC5ip7u/icon
import stephenPhillipsHostreviewsCoUk3Mhgvrk4TjMUnsplashjpgQ1TTCkqGzbCvha from "./images/stephenPhillipsHostreviewsCoUk3Mhgvrk4TjMUnsplashjpg.jpeg"; // plasmic-import: q1tTCkqGzbCvha/picture
import corinneKutzTMi2R5NfoUnsplashjpgGzBj5Y3ZkRfGbA from "./images/corinneKutzTMi2R5NfoUnsplashjpg.jpeg"; // plasmic-import: gzBJ5y3ZkRFGbA/picture

export const PlasmicContact__VariantProps = new Array();

export const PlasmicContact__ArgProps = new Array();

function PlasmicContact__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsruCWDbKoSkemq()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <div
            data-plasmic-name={"pageBanner"}
            data-plasmic-override={overrides.pageBanner}
            className={classNames(projectcss.all, sty.pageBanner)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__x9AZd)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__zFe0I)}
              >
                <div className={classNames(projectcss.all, sty.column__s25Nn)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__gDi6)}
                  >
                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      {"Contact Us"}
                    </h1>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xQdZz
                      )}
                    >
                      {
                        "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,"
                      }
                    </div>
                  </p.Stack>
                </div>

                <div className={classNames(projectcss.all, sty.column__ek4Px)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__pzDsn)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "100%"
                        : "100%"
                    }
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "lazy"
                        : "lazy"
                    }
                    src={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? {
                            src: stephenPhillipsHostreviewsCoUk3Mhgvrk4TjMUnsplashjpgQ1TTCkqGzbCvha,
                            fullWidth: 1920,
                            fullHeight: 1280,
                            aspectRatio: undefined
                          }
                        : {
                            src: stephenPhillipsHostreviewsCoUk3Mhgvrk4TjMUnsplashjpgQ1TTCkqGzbCvha,
                            fullWidth: 1920,
                            fullHeight: 1280,
                            aspectRatio: undefined
                          }
                    }
                  />
                </div>
              </p.Stack>
            </div>
          </div>

          <div
            data-plasmic-name={"mainSection"}
            data-plasmic-override={overrides.mainSection}
            className={classNames(projectcss.all, sty.mainSection)}
          >
            <div className={classNames(projectcss.all, sty.columns__kUxJ)}>
              <div className={classNames(projectcss.all, sty.column__aXfkB)}>
                <div
                  data-plasmic-name={"container4"}
                  data-plasmic-override={overrides.container4}
                  className={classNames(projectcss.all, sty.container4)}
                >
                  <h3
                    data-plasmic-name={"h3"}
                    data-plasmic-override={overrides.h3}
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3
                    )}
                  >
                    {"Get in touch"}
                  </h3>

                  <label
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.label__fcUbA
                    )}
                  >
                    {"Name"}
                  </label>

                  <TextInput
                    className={classNames(
                      "__wab_instance",
                      sty.textInput__tWdvx
                    )}
                    placeholder={" "}
                  />

                  <label
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.label__faD1
                    )}
                  >
                    {"Email"}
                  </label>

                  <TextInput
                    className={classNames(
                      "__wab_instance",
                      sty.textInput__kdAs8
                    )}
                    placeholder={" "}
                  />

                  <label
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.label__dSj1L
                    )}
                  >
                    {"Subject"}
                  </label>

                  <Select
                    data-plasmic-name={"select"}
                    data-plasmic-override={overrides.select}
                    className={classNames("__wab_instance", sty.select)}
                    placeholder={"Please select"}
                  />

                  <label
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.label__phQiG
                    )}
                  >
                    {"Message"}
                  </label>

                  <textarea
                    data-plasmic-name={"textarea"}
                    data-plasmic-override={overrides.textarea}
                    className={classNames(
                      projectcss.all,
                      projectcss.textarea,
                      sty.textarea
                    )}
                    value={""}
                  />

                  <Checkbox
                    data-plasmic-name={"checkbox"}
                    data-plasmic-override={overrides.checkbox}
                    className={classNames("__wab_instance", sty.checkbox)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nlg0I
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "I understand that this form is \nstoring my submitted information \nso I can be contacted."
                        : "I understand that this form is storing"}
                    </div>
                  </Checkbox>

                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__uGqzZ)}
                    >
                      <Button
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        className={classNames("__wab_instance", sty.button)}
                        color={"blue"}
                        endIcon={
                          <ArrowRightsvgIcon
                            data-plasmic-name={"svg"}
                            data-plasmic-override={overrides.svg}
                            className={classNames(projectcss.all, sty.svg)}
                            role={"img"}
                          />
                        }
                        shape={"rounded"}
                        showEndIcon={true}
                      >
                        {"Start Now"}
                      </Button>
                    </div>
                  ) : null}
                </div>
              </div>

              <div className={classNames(projectcss.all, sty.column___01QKd)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__pVrO)}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: corinneKutzTMi2R5NfoUnsplashjpgGzBj5Y3ZkRfGbA,
                    fullWidth: 1920,
                    fullHeight: 1280,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
          </div>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "pageBanner",
    "h1",
    "mainSection",
    "container4",
    "h3",
    "select",
    "textarea",
    "checkbox",
    "button",
    "svg",
    "footer"
  ],

  header: ["header"],
  pageBanner: ["pageBanner", "h1"],
  h1: ["h1"],
  mainSection: [
    "mainSection",
    "container4",
    "h3",
    "select",
    "textarea",
    "checkbox",
    "button",
    "svg"
  ],

  container4: [
    "container4",
    "h3",
    "select",
    "textarea",
    "checkbox",
    "button",
    "svg"
  ],

  h3: ["h3"],
  select: ["select"],
  textarea: ["textarea"],
  checkbox: ["checkbox"],
  button: ["button", "svg"],
  svg: ["svg"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicContact__ArgProps,
      internalVariantPropNames: PlasmicContact__VariantProps
    });

    return PlasmicContact__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicContact";
  } else {
    func.displayName = `PlasmicContact.${nodeName}`;
  }
  return func;
}

export const PlasmicContact = Object.assign(
  // Top-level PlasmicContact renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    pageBanner: makeNodeComponent("pageBanner"),
    h1: makeNodeComponent("h1"),
    mainSection: makeNodeComponent("mainSection"),
    container4: makeNodeComponent("container4"),
    h3: makeNodeComponent("h3"),
    select: makeNodeComponent("select"),
    textarea: makeNodeComponent("textarea"),
    checkbox: makeNodeComponent("checkbox"),
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicContact
    internalVariantProps: PlasmicContact__VariantProps,
    internalArgProps: PlasmicContact__ArgProps
  }
);

export default PlasmicContact;
/* prettier-ignore-end */
